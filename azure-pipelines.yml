trigger:
  branches:
    include:
      - main

variables:
  DEPLOYMENT_NAMESPACE: "windows-aks-ns-devops"
  AZURE_CONTAINER_REGISTRY: "akswindemoreg.azurecr.io"
  CONTAINER_NAME: "windows-container-app"
  CONTAINER_TAG: "v1"
  IMAGE_FULL_PATH: "$(AZURE_CONTAINER_REGISTRY)/$(CONTAINER_NAME):$(CONTAINER_TAG)"
  AKS_CLUSTER_NAME: "demowinclu001"
  AKS_RESOURCE_GROUP: "rg-apps-passmig-asia-v-santanup-demo"
  AZURE_SUBSCRIPTION: "aks-windows-demo-panchsan-sc" # Azure RM Service Connection Name
  KUBE_SERVICE_CONNECTION: "demowinclu001-aks-windows-ado-ns" # Kubernetes Service Connection Name

pool:
  vmImage: 'windows-2022'

stages:
- stage: Deploy
  displayName: Deploy Windows Container to AKS
  jobs:
  - job: DeployJob
    displayName: Deploy to AKS
    steps:

    # Install kubectl if not available
    - task: KubectlInstaller@0
      displayName: 'Install kubectl'
      inputs:
        kubectlVersion: 'latest'

    # Login to Azure and ACR
    - task: AzureCLI@2
      displayName: 'Login to Azure and ACR'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Logging into Azure"
          az acr login --name $(AZURE_CONTAINER_REGISTRY)

    # Set kubectl context and create namespace if it doesn't exist
    - task: AzureCLI@2
      displayName: 'Set AKS context and create namespace'
      inputs:
        azureSubscription: $(AZURE_SUBSCRIPTION)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Setting AKS context"
          az aks get-credentials --resource-group $(AKS_RESOURCE_GROUP) --name $(AKS_CLUSTER_NAME) --overwrite-existing

          echo "Creating namespace if not exists"
          kubectl get namespace $(DEPLOYMENT_NAMESPACE) || kubectl create namespace $(DEPLOYMENT_NAMESPACE)

    # Deploy manifest with image substitution
    - task: KubernetesManifest@1
      displayName: 'Deploy Windows Web App'
      inputs:
        action: deploy
        kubernetesServiceConnection: $(KUBE_SERVICE_CONNECTION)
        namespace: $(DEPLOYMENT_NAMESPACE)
        manifests: |
          Deployments/01-windows-deployment.yaml
          Deployments/02-windows-service.yaml
        containers: |
          $(IMAGE_FULL_PATH)

    # Wait for rollout completion
    - task: Kubernetes@1
      displayName: 'Wait for Deployment Rollout'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: $(KUBE_SERVICE_CONNECTION)
        namespace: $(DEPLOYMENT_NAMESPACE)
        command: rollout
        arguments: 'status deployment/windows-webapp'